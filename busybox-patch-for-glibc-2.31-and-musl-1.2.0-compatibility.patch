diff --git a/Makefile.flags b/Makefile.flags
index 70894aa..a0b61fa 100644
--- a/Makefile.flags
+++ b/Makefile.flags
@@ -130,10 +130,12 @@ endif
 # fall back to using a temp file:
 CRYPT_AVAILABLE := $(shell echo 'int main(void){return 0;}' >crypttest.c; $(CC) $(CFLAGS) -lcrypt -o /dev/null crypttest.c >/dev/null 2>&1 && echo "y"; rm crypttest.c)
 ifeq ($(CRYPT_AVAILABLE),y)
-LDLIBS += m crypt
+LDLIBS += m rt crypt
 else
-LDLIBS += m
+LDLIBS += m rt
 endif
+# libm may be needed for dc, awk, ntpd
+# librt may be needed for clock_gettime()
 
 # libpam may use libpthread, libdl and/or libaudit.
 # On some platforms that requires an explicit -lpthread, -ldl, -laudit.
diff --git a/coreutils/date.c b/coreutils/date.c
index c2e99f5..9f32d07 100644
--- a/coreutils/date.c
+++ b/coreutils/date.c
@@ -265,13 +265,14 @@ int date_main(int argc UNUSED_PARAM, char **argv)
 #endif
    } else {
 #if ENABLE_FEATURE_DATE_NANO
-       /* libc has incredibly messy way of doing this,
-        * typically requiring -lrt. We just skip all this mess */
-       syscall(__NR_clock_gettime, CLOCK_REALTIME, &ts);
+       clock_gettime(CLOCK_REALTIME, &ts);
 #else
        time(&ts.tv_sec);
 #endif
    }
+#if !ENABLE_FEATURE_DATE_NANO
+   ts.tv_nsec = 0;
+#endif
    localtime_r(&ts.tv_sec, &tm_time);
 
    /* If date string is given, update tm_time, and maybe set date */
diff --git a/libbb/time.c b/libbb/time.c
index 82e6cb1..252abd5 100644
--- a/libbb/time.c
+++ b/libbb/time.c
@@ -239,11 +239,9 @@ char* FAST_FUNC strftime_YYYYMMDDHHMMSS(char *buf, unsigned len, time_t *tp)
 #define CLOCK_MONOTONIC 1
 #endif
 
-/* libc has incredibly messy way of doing this,
- * typically requiring -lrt. We just skip all this mess */
 static void get_mono(struct timespec *ts)
 {
-   if (syscall(__NR_clock_gettime, CLOCK_MONOTONIC, ts))
+   if (clock_gettime(CLOCK_MONOTONIC, ts))
        bb_error_msg_and_die("clock_gettime(MONOTONIC) failed");
 }
 unsigned long long FAST_FUNC monotonic_ns(void)
